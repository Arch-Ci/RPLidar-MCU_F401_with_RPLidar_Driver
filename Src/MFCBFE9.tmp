/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
//#include "rplidar.h"
#include "serial.h"
#include "net_socket.h"
#include "task.h"
#include "timer.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart6;
DMA_HandleTypeDef hdma_usart1_rx;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART6_UART_Init(void);
static void MX_TIM3_Init(unsigned short pwm);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif 
PUTCHAR_PROTOTYPE
{
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
  return ch;
}

uint8_t scan[]={0xA5,0x20};

unsigned int curr_wait_size = 0;
unsigned int prev_wait_size = 0;
unsigned int next_wait_size = 0;

char* prev_wait_addr = NULL;
char* next_wait_addr = NULL;

enum_buffer_state uart1_rx_buffer_A_state = IS_EMPTY;
enum_buffer_state uart1_rx_buffer_B_state = IS_EMPTY;

unsigned int uart1_rx_buffer_A_validPos = 0;
unsigned int uart1_rx_buffer_B_validPos = 0;

char uart1_rx_buffer_A[UART1_RX_BUFFER_SIZE] = {0};
char uart1_rx_buffer_B[UART1_RX_BUFFER_SIZE] = {0};

HAL_StatusTypeDef status;

void MX_TIM3_Set_Pwm(unsigned short pwm)
{
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
  
  MX_TIM3_Init (pwm);
  
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
}

void view_dot_task (void* arg)
{
  ;
}
/*
 * Testing procedure――: Send A5 20 through UART1 Tx only once, 
 * UART1 Rx is connected with Lidar's Tx, every time will receive Lidar's 5KB bytes through DMA, uart1_rx_buffer_A and uart1_rx_buffer_B will be used interchangeably,
 * in the main loop, judge whther uart1_rx_buffer_A or uart1_rx_buffer_B is IS_READY, then send these 5KB bytes to computer through UART6 Tx;
 * Noticed――: STM32 F401 Nucleo's UART2 may have some problems, UART's RX could not trigger interrupt;
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  if (uart1_rx_buffer_A_state == IS_WRITING)
  {
    uart1_rx_buffer_A_state = IS_READY;
    
    uart1_rx_buffer_A_validPos = curr_wait_size;
    
    if ((uart1_rx_buffer_B_state == IS_EMPTY) && (next_wait_size > 0))
    {
      HAL_UART_Receive_DMA(&huart1, uart1_rx_buffer_B, next_wait_size);
      
      prev_wait_addr = uart1_rx_buffer_A;
      next_wait_addr = uart1_rx_buffer_B;
      
      uart1_rx_buffer_B_state = IS_WRITING;
    }
  }  
  else if (uart1_rx_buffer_B_state == IS_WRITING)
  {
    uart1_rx_buffer_B_state = IS_READY;
    
    uart1_rx_buffer_B_validPos = curr_wait_size;
    
    if ((uart1_rx_buffer_A_state == IS_EMPTY) && (next_wait_size > 0))
    {  
      HAL_UART_Receive_DMA(&huart1, uart1_rx_buffer_A, next_wait_size);
    
      prev_wait_addr = uart1_rx_buffer_B;
      next_wait_addr = uart1_rx_buffer_A;
      
      uart1_rx_buffer_A_state = IS_WRITING;
    }
  }
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_USART6_UART_Init();
  MX_TIM3_Init(DEFAULT_MOTOR_PWM);
  /* USER CODE BEGIN 2 */
  LidarDrvInit ();
  
  LidarDrv.stopScan ();
  
  LidarDrv.stopMotor ();
  
  if (LidarDrv.getDeviceInfo (500) == TRUE)
  {
    printf ("Model : %x\nFirmware : %d.%d\nHardware : %02d\nSN : ", LidarDrv.lidar_info.model, LidarDrv.lidar_info.firmware_version_major, LidarDrv.lidar_info.firmware_version_minor, LidarDrv.lidar_info.hardware_version);
  
    for (unsigned char i = 0; i < 16; i++)
    {
      printf ("%02X", LidarDrv.lidar_info.serialnum[i]);
    }
    
    printf ("\n");
    
    LidarDrv.isConnected = TRUE;
    
    if (LidarDrv.getHealth (500) == TRUE)
    {
      printf ("Health Info : %x\nError Code : %d\n", LidarDrv.health_info.status, LidarDrv.health_info.error_code);
    }
    
    if (LidarDrv.checkMotorCtrlSupport (500) == FALSE)
    {  
      LidarDrv.isSupportingMotorCtrl = TRUE;

      if (LidarDrv.isSupportingMotorCtrl == TRUE)
      {
        printf ("SupportMotorCtrl : True\n");
      }
      else
      {
        printf ("SupportMotorCtrl : False\n");    
      }
    }
    
    if (LidarDrv.getAllSupportedScanModes (2000) == TRUE)
    {
        printf ("ScanModeCount : %d\n",LidarDrv.ScanModeCount);
        
        printf ("TypicalScanModeID : %d\n",LidarDrv.TypicalScanModeID);
      
        unsigned short temp;
                  
        if (LidarDrv.ScanModeCount > MAX_SCAN_MODE_COUNT)    //最多可显示MAX_SCAN_MODE_COUNT个扫描模式的详细信息，剩下的无法显示；
          temp = MAX_SCAN_MODE_COUNT;
        else
          temp = LidarDrv.ScanModeCount;
                    
        for (unsigned short j = 0; j < temp; j++)
        {
          printf ("ID  %d  :  %s  %d Points/Sec  %dm  0x%02X\n\n", LidarDrv.ScanMode[j].id, LidarDrv.ScanMode[j].scan_mode, (int)(1000000/LidarDrv.ScanMode[j].us_per_sample), (int)(LidarDrv.ScanMode[j].max_distance), LidarDrv.ScanMode[j].ans_type);
        }
    }
  }
  
  
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /*if (flag == 0)
    {
      HAL_UART_Transmit(&huart1, (uint8_t*)scan, 2, 0xFFFF);
      flag = 1;
      
      char* data_addr;
      char data[7];
      unsigned int time_out_ms = 500;
      unsigned int wait_size = 7;    prev_wait_size = 0;    next_wait_size = 5120;
      
      if (LidarDrv.waitData (wait_size, &time_out_ms, &data_addr) == TRUE)
      {
        if (LidarDrv.recvData ((char*)data, wait_size, data_addr) == wait_size)
        {
          for (unsigned char i = 0; i < 7; i++)
          {
            printf("%02x\n",data[i]);
          }
          
          LidarDrv.startMotor ();
        }       
      }
    }*/
    LidarDrv.startMotor ();
    
    HAL_Delay (100);
    
    if (LidarDrv.startScan (FALSE, 3, 500) == TRUE)
    {
      switch (LidarDrv.currentScanMode)
      {
	    case RPLIDAR_CONF_SCAN_COMMAND_STD :
          curr_wait_size = UART1_RX_BUFFER_SIZE / sizeof(rplidar_response_measurement_node_t) * sizeof(rplidar_response_measurement_node_t);
          next_wait_size = curr_wait_size;
          break;
          
        case RPLIDAR_CONF_SCAN_COMMAND_EXPRESS :
        case RPLIDAR_CONF_SCAN_COMMAND_DENSEBOOST :         
          curr_wait_size = UART1_RX_BUFFER_SIZE / sizeof(rplidar_response_capsule_measurement_nodes_t) * sizeof(rplidar_response_capsule_measurement_nodes_t);
          next_wait_size = curr_wait_size;
          break;
          
        case RPLIDAR_CONF_SCAN_COMMAND_HQ :         
          curr_wait_size = UART1_RX_BUFFER_SIZE; 
          next_wait_size = curr_wait_size;
          break;
          
        case RPLIDAR_CONF_SCAN_COMMAND_BOOST :         
        case RPLIDAR_CONF_SCAN_COMMAND_SENSITIVITY :           
        case RPLIDAR_CONF_SCAN_COMMAND_STABILITY :         
          curr_wait_size = UART1_RX_BUFFER_SIZE / sizeof(rplidar_response_ultra_capsule_measurement_nodes_t) * sizeof(rplidar_response_ultra_capsule_measurement_nodes_t); 
          next_wait_size = curr_wait_size;
          break;
        
        default:
          curr_wait_size = UART1_RX_BUFFER_SIZE; 
          next_wait_size = curr_wait_size;
          break;
      }
      
      if (uart1_rx_buffer_A_state == IS_EMPTY)
      {  
        HAL_UART_Receive_DMA(&huart1, uart1_rx_buffer_A, curr_wait_size);
        
        uart1_rx_buffer_A_state = IS_WRITING;       
      }
      else if (uart1_rx_buffer_B_state == IS_EMPTY)
      {
        HAL_UART_Receive_DMA(&huart1, uart1_rx_buffer_B, curr_wait_size);

        uart1_rx_buffer_B_state = IS_WRITING;
      }   
      
      LidarDrv.current_cache_proc (NULL);  
    }
    
    /* USER CODE BEGIN 3 */
    
    /* USER CODE END 3 */
  }
  /* USER CODE END WHILE */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(unsigned short pwm)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 83;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 39;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = pwm;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 256000;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */
  
  //status = HAL_UART_Receive_DMA(&huart1, uart1_rx_buffer_A, UART1_RX_BUFFER_SIZE);
  //uart1_rx_buffer_A_state = IS_WRITING;
  
  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 256000;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */
  
  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
  huart6.Init.BaudRate = 256000;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart6) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART6_Init 2 */
  
  /* USER CODE END USART6_Init 2 */

}

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
